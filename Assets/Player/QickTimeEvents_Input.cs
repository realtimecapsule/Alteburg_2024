//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Player/QickTimeEvents_Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @QickTimeEvents_Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @QickTimeEvents_Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""QickTimeEvents_Input"",
    ""maps"": [
        {
            ""name"": ""QuickTimeEvents"",
            ""id"": ""fefed24d-8cc5-444e-8a46-3d5a21733871"",
            ""actions"": [
                {
                    ""name"": ""Press F"",
                    ""type"": ""Button"",
                    ""id"": ""574fbf73-a9c0-4f9e-b087-dd20e41142aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""74b794ff-bd7d-4bb8-bbb7-46cdaee51cdb"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press F"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // QuickTimeEvents
        m_QuickTimeEvents = asset.FindActionMap("QuickTimeEvents", throwIfNotFound: true);
        m_QuickTimeEvents_PressF = m_QuickTimeEvents.FindAction("Press F", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // QuickTimeEvents
    private readonly InputActionMap m_QuickTimeEvents;
    private List<IQuickTimeEventsActions> m_QuickTimeEventsActionsCallbackInterfaces = new List<IQuickTimeEventsActions>();
    private readonly InputAction m_QuickTimeEvents_PressF;
    public struct QuickTimeEventsActions
    {
        private @QickTimeEvents_Input m_Wrapper;
        public QuickTimeEventsActions(@QickTimeEvents_Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @PressF => m_Wrapper.m_QuickTimeEvents_PressF;
        public InputActionMap Get() { return m_Wrapper.m_QuickTimeEvents; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(QuickTimeEventsActions set) { return set.Get(); }
        public void AddCallbacks(IQuickTimeEventsActions instance)
        {
            if (instance == null || m_Wrapper.m_QuickTimeEventsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_QuickTimeEventsActionsCallbackInterfaces.Add(instance);
            @PressF.started += instance.OnPressF;
            @PressF.performed += instance.OnPressF;
            @PressF.canceled += instance.OnPressF;
        }

        private void UnregisterCallbacks(IQuickTimeEventsActions instance)
        {
            @PressF.started -= instance.OnPressF;
            @PressF.performed -= instance.OnPressF;
            @PressF.canceled -= instance.OnPressF;
        }

        public void RemoveCallbacks(IQuickTimeEventsActions instance)
        {
            if (m_Wrapper.m_QuickTimeEventsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IQuickTimeEventsActions instance)
        {
            foreach (var item in m_Wrapper.m_QuickTimeEventsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_QuickTimeEventsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public QuickTimeEventsActions @QuickTimeEvents => new QuickTimeEventsActions(this);
    public interface IQuickTimeEventsActions
    {
        void OnPressF(InputAction.CallbackContext context);
    }
}
